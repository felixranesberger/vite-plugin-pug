{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { join } from \"node:path\"\nimport type { Options as PugOptions, LocalsObject } from \"pug\"\nimport type { Logger, Plugin } from \"vite\"\nimport { compileFile } from \"pug\"\nimport pc from \"picocolors\"\n\ninterface PluginOptions extends PugOptions {\n  /**\n   * Look for pug files in the directory\n   * of currently compiled index.html\n   * (locally)\n   * instead of project root.\n   *\n   * Can accept a function to determine the option per-html-file.\n   */\n  localImports?: boolean | ((htmlfile: string) => boolean)\n}\n\nexport function pugs(html: string, pugger: (filename: string, tagLocals: Record<string, unknown>) => string, logger?: Pick<Logger, \"warn\">) {\n  return html.replace(/<pug.+?(file|src)=\"(.+?)\".+?(locals=\"(.+?)\")?.*?\\/.*?>/gi, (_tag: string, srcAttribute: string, filename: string, _tagLocalsAttribute: string, tagLocals: string) => {\n    if (srcAttribute === \"file\" && logger) {\n      logger.warn(\n        `${pc.red(`the ${pc.bold(`file`)} attribute is deprecated,`)} ${pc.cyan(\n          `please include ${pc.italic(filename)} with ${pc.bold(`src`)} instead`\n        )}`\n      )\n    }\n    return pugger(filename, tagLocals ? JSON.parse(decodeURIComponent(tagLocals)) : {})\n  })\n}\n\nexport default function pugPlugin(options?: PluginOptions, locals?: LocalsObject): Plugin {\n  return {\n    name: \"vite-plugin-pug\",\n\n    handleHotUpdate({ file, server }) {\n      if (file.endsWith(\".pug\")) {\n        server.config.logger.info(`${pc.red(`pugâ€™s not hot`)} ðŸŒ­ ${pc.cyan(file)}`)\n        server.ws.send({\n          type: \"full-reload\"\n        })\n      }\n    },\n\n    transformIndexHtml(html, { server, filename: htmlfile }) {\n      return pugs(\n        html,\n        (filename, tagLocals) => {\n              const compile = (filepath: string) => compileFile(filepath, options)({ ...locals, ...tagLocals })\n              if (\n                  (typeof options?.localImports === \"function\" && options.localImports(htmlfile)) ||\n                  options?.localImports\n              ) {\n                  // extract current directory from the html file path\n                  const filedir = htmlfile.replace(/(.*)[\\\\\\/].*\\.html$/, \"$1\")\n\n                  // apply current directory to the pug file imported from html\n                  const filepath = join(filedir, filename)\n\n                  return compile(filepath)\n              }\n\n              return compile(filename)\n          },\n          server?.config.logger\n      )\n    },\n  }\n}\n"],"mappings":"AAAA,OAAS,QAAAA,MAAY,YAGrB,OAAS,eAAAC,MAAmB,MAC5B,OAAOC,MAAQ,aAcR,SAASC,EAAKC,EAAcC,EAA0EC,EAA+B,CAC1I,OAAOF,EAAK,QAAQ,2DAA4D,CAACG,EAAcC,EAAsBC,EAAkBC,EAA6BC,KAC9JH,IAAiB,QAAUF,GAC7BA,EAAO,KACL,GAAGJ,EAAG,IAAI,OAAOA,EAAG,KAAK,MAAM,4BAA4B,KAAKA,EAAG,KACjE,kBAAkBA,EAAG,OAAOO,CAAQ,UAAUP,EAAG,KAAK,KAAK,WAC7D,GACF,EAEKG,EAAOI,EAAUE,EAAY,KAAK,MAAM,mBAAmBA,CAAS,CAAC,EAAI,CAAC,CAAC,EACnF,CACH,CAEe,SAARC,EAA2BC,EAAyBC,EAA+B,CACxF,MAAO,CACL,KAAM,kBAEN,gBAAgB,CAAE,KAAAC,EAAM,OAAAC,CAAO,EAAG,CAC5BD,EAAK,SAAS,MAAM,IACtBC,EAAO,OAAO,OAAO,KAAK,GAAGd,EAAG,IAAI,oBAAe,eAAQA,EAAG,KAAKa,CAAI,GAAG,EAC1EC,EAAO,GAAG,KAAK,CACb,KAAM,aACR,CAAC,EAEL,EAEA,mBAAmBZ,EAAM,CAAE,OAAAY,EAAQ,SAAUC,CAAS,EAAG,CACvD,OAAOd,EACLC,EACA,CAACK,EAAUE,IAAc,CACnB,IAAMO,EAAWC,GAAqBlB,EAAYkB,EAAUN,CAAO,EAAE,CAAE,GAAGC,EAAQ,GAAGH,CAAU,CAAC,EAChG,GACK,OAAOE,GAAS,cAAiB,YAAcA,EAAQ,aAAaI,CAAQ,GAC7EJ,GAAS,aACX,CAEE,IAAMO,EAAUH,EAAS,QAAQ,sBAAuB,IAAI,EAGtDE,EAAWnB,EAAKoB,EAASX,CAAQ,EAEvC,OAAOS,EAAQC,CAAQ,CAC3B,CAEA,OAAOD,EAAQT,CAAQ,CAC3B,EACAO,GAAQ,OAAO,MACnB,CACF,CACF,CACF","names":["join","compileFile","pc","pugs","html","pugger","logger","_tag","srcAttribute","filename","_tagLocalsAttribute","tagLocals","pugPlugin","options","locals","file","server","htmlfile","compile","filepath","filedir"]}